Golang Cheat Sheet

===========
25 Keywords
===========

break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var

Predeclared names
-----------------

Constants: true false iota nil
Types:  int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr 
        float32 float64 complex128 complex64 bool byte rune string error
Functions: make len cap new append copy close delete complex real imag panic recover

Declarations
------------
There are four major kinds of declarations: 
  var, func, type, and const 

==========================
Type declaration (structs)
==========================
A struct's fields usually represent the "has-a" relationship. For example a Circle has an x,y location and a radius. 

type Circle struct {
  x float64
  y float64
  r float64
}
	==or==
type Circle struct {
  x, y, r float64
}

===========================
func declaration (functions)
===========================
func <function_name>(<arg_names> <arg_types>, ...) (<return_types>, ...) {
  //function implementation
}

===================
Method declarations 
===================
Methods are functions that belong to an instance of a specific type (i.e., the "receiver" type).
Methods are called as follows: type_instance.method_name(args)

// Methods with pointer receivers CAN modify the value to which the receiver points.
// Since methods often need to modify their receiver, pointer receivers are more common than value receivers.
func (p *Person) MethodWithSideEffect(first string, last string) {
  p.FirstName = first
  p.LastName = last
}

//calling the above method (p is a Person object)
(&p).MethodWithSideEffect("Brian", "Greene")

--------

// Methods with value receivers can NOT modify the value to which the receiver points.
// With a value receiver, the method operates on a copy of the original Vertex value.
// (This is the same behavior as for any other value function argument)
func (p Person) MethodWithoutSideEffect(first string, last string) Person {
  p.FirstName = first
  p.LastName = last
  return p
}

//calling the above (p is a Person object)
m := p.MethodWithoutSideEffect("Little", "Richard")

==============
Embedded Types (inheritance)
==============
Embedded types within a struct can be used to represent the "is-a" relationship 

type Person struct {
  Name string
}
func (p *Person) Talk() {
  fmt.Println("Hi, my name is", p.Name)
}

type Android struct {
  Person		//an embedded type without a name represents the "is-a" relationship (an Android is-a type of Person)
  Model string
}
a := Android{name: "R2D2"}
a.Talk()

==========================
Initialization/Declaration (different ways)
==========================

var f *Circle = new(Circle)       //creates a Circle variable that is by default set to zero
                                  //function new(T) returns a pointer to a newly allocated zero value of type T

var c Circle		                  //creates a variable (c) of type Circle that is by default set to zero

var c = Circle{x: 0, y: 0, r: 5}  //creates a variable (c) of type Circle with given initial values

--- short form --- (ONLY inside of functions)
c := new(Circle)	//allocates memory for all the fields, sets them all to their zero value and returns a pointer (*Circle) 

c := Circle{x: 0, y: 0, r: 5}	//allocates memory, sets all the values, an object of type Circle

The following are 3 equivalent ways to create an object and return a pointer to the object's address
    // Allocate enough memory to store a bytes.Buffer value and return a pointer to the value's address.
    var buf bytes.Buffer
    p := &buf

    // Use a composite literal to perform allocation and return a pointer to the value's address.
    p := &bytes.Buffer{}

    // Use the new() function to perform allocation, which will return a pointer to the value's address.
    p := new(bytes.Buffer)    //note that new() is rarely used

===============
new() vs make()
===============

new():  The built-in function new(T) is rarely used. It allocates “zeroed” storage for a new item of type T.
        It returns a pointer (*T) to a newly allocated zero value of type T. 

        var x *int = new(int)

make(): The built-in function make(T, args) is used to create slices, maps, and channels only.
        It returns an initialized (not zeroed) value of type T (not *T). 

        // Idiomatic:
        v = make([]int, 10, 100)  //allocates an array of 100 ints and then creates a slice structure with length 10 and a 
                                    capacity of 100 pointing at the first 10 elements of the array. 
        v := make([]int, 10)     //the capacity can be omitted

        make(map[string]int)        //makes a map of string (keys) to int (values)
        make(map[string]int, 100)   //optional size: initial size 100 (that grows automatically)

        make(chan int)              //makes a channel
        make(chan int, 100)         //optional capacity 100

=================
Arrays and Slices
=================

  //an array is declared by specifying the length within the square brackets
  array := [3]string{"gold", "silver", "bronze"}
  fmt.Printf("Type of array=%T\n", array) // Type of array=[3]string

  //a slice is declared by NOT specifying the length within the square brackets
  slice := []string{"gold", "silver", "bronze"}
  fmt.Printf("Type of slice=%T\n", slice) // Type of slice=[]string

An array is a fixed-length sequence of zero or more elements of a particular type. 
Because of their fixed length, arrays are rarely used directly in Go.

    Declare and assign array values:

        medals := [3]string{"gold", "silver", "bronze"}
        fmt.Println(medals)   //[gold silver bronze]
          
    The above declaration also assigns each element, as if it had been written like this:
        var medals [3]string
        medals[0] = "gold"
        medals[1] = "silver"
        medals[2] = "bronze"
        fmt.Println(medals)   //[gold silver bronze]

Slices
------
Slices represent variable-length sequences whose elements all have the same type. 
A slice type is written []T, where the elements have type T; it looks like an array type WITHOUT a size.

Four ways to declare a slice:
  1)  s := []int{1,2,3,4} //initialize with values

  2)  s := []int{}        //NOT RECOMMENDED. initialize without values (memory is allocated)

  3)  var s []int         //declare a slice but don't allocate memory just yet

  4)  s := make([]int, length, capacity)  //initialize without values with a length and capacity

    A slice is declared without a size within the square brackets

      slice := []string{"gold", "silver", "bronze"}
      fmt.Printf("Type of slice=%T\n", slice)   // Type of slice=[]string

      s := make([]int, length, capacity)

    Because slices are variable-length, it is possible to have each inner slice be a different length. 

        text := LinesOfText{
          []byte("Now is the time"),
          []byte("for all good gophers"),
          []byte("to bring some fun to the party."),
        }

        // Example of a 2-Dimensional Array (for a transformation matrix)
        type Transform [3][3]float64  // A 3x3 array, really an array of arrays. 

        // Example of a 2-Dimensional Array/Slice to store array of pixels for a picture
        // Allocate the top-level slice
        picture := make([][]uint8, YSize) // One row per unit of y.
        // Loop over the rows, allocating the slice for each row.
        for i := range picture {
          picture[i] = make([]uint8, XSize)
        }

===================
String manipulation
===================

Four standard packages are particularly important for manipulating strings: 
  bytes, strings, strconv, and unicode 

"strings" package - provides many functions for searching, replacing, comparing , 
trimming, splitting, and joining strings. It includes functions like ToUpper and ToLower, 
that return a new string with the specified transformation applied.

  Other functions in the "strings" package:
    func Contains(s, substr string) bool
    func Count(s, sep string) int
    func Fields(s string) []string
    func HasPrefix(s, prefix string) bool
    func Index(s, sep string) int
    func Join(a []string, sep string) string

"strconv" package - provides functions for converting boolean, integer, and floating-point values 
to and from their string representations, and functions for quoting and unquoting strings.

  Other functions in the strconv package:
    func Atoi
    func Itoa
    func ParseInt
    func ParseUint
    func ParseBool
    func ParseFloat
    func FormatInt

"unicode package - provides functions like IsDigit, IsLetter, IsUpper, and IsLower for
classifying runes. Each function takes a single rune argument and returns a boolean.


=========
Constants
=========
The underlying type of every constant is a basic type: boolean, string, or number.

const BoilingPointC = 100
const FreezingPointC = 0


=========================
iota - Constant Generator
=========================

The following example uses iota to declare Sunday to be 0, Monday to be 1, and so on.

  type Weekday int

  const (
    Sunday Weekday = iota
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
  )


=========
Functions
=========
// this function cannot modify the given Circle argument (because arguments are always copied in Go)
func circleArea(c Circle) float64 {
  return math.Pi * c.r*c.r
}

fmt.Println(circleArea(c))

// in order to allow the function to modify the argument, it must be specified as a pointer, like this 
func circleArea(c *Circle) float64 {
  return math.Pi * c.r*c.r
}

fmt.Println(circleArea(&c))

=======
Methods (have receivers: Pointer Receivers or Value Receivers) 
=======
A special type of go function is known as a Method. 
Methods have a "receiver" type specified between the keyword "func" and the name of the function. 

// Value Receiver -- this method cannot modify the given Circle argument 
func (c Circle) area() float64 {
  return math.Pi * c.r*c.r
}

// Pointer Receiver -- this method CAN modify the given Circle argument 
func (c *Circle) Area() float64 {
  return math.Pi * c.r*c.r
}

By creating the function in this way it allows us to call the function using the . operator:

fmt.Println(c.area())
 ==or==
fmt.Println((&c).Area())

This is easier to read, we no longer need the & operator (Go automatically knows to pass a pointer to the circle)

========
Pointers
========

- The expression &x (‘address of x‘) yields a pointer to an integer variable, that is, a value of type *int, which is pronounced ‘pointer to int.' 
- If this value is called p, we say ‘p points to x,' or equivalently ‘p contains the address of x.' 
- The variable x to which p points is written *p. The expression *p yields the value at address p.
- Since *p denotes a variable, it may also appear on the left-hand side of an assignment, in which case 
the assignment updates the variable (x).

x := 1          //variable delcaration
p := &x         // p, of type *int, points to x (p is a pointer that holds the address of x)
fmt.Println(*p) // "1"  (the value at p is still 1)
*p = 2          // equivalent to x = 2 (the value at p now equals 2, so x equals 2)
fmt.Println(x)  // "2"

==================
The new() function (rarely used)
==================
Another way to create a variable is to use the built-in function new(T).
The expression new(T) creates an unnamed variable of typ e T, initializes it to the zero value of T, 
and returns its address, which is a value of type *T.

var p *int = new(int)

Note: The new function is relatively rarely used because the most common unnamed variables are of
struct types, for which the struct literal syntax (§4.4.1) is more flexible.

=========
for loops
=========
The for loop is the only loop statement in Go. It has a number of forms.

for initialization; condition; post {
  // zero or more statements
}

// a traditional "while" loop
for condition {
  // ...
}

// a traditional infinite loop
for {
  // ...
}

================
Switch statement
================
// The result of calling coinflip is compared to the value of each case.

switch coinflip() {
case "heads":
  heads++
case "tails":
  tails++
default:
  fmt.Println("landed on edge!")
}

func Signum(x int) int {
  switch {
  case x > 0:
    return +1
  default:
    return 0
  case x < 0:
    return -1
  }
}

================
Blank identifier (the underscore)
================

We can assign unwanted values to the blank identifier:
  _, err = io.Copy(dst, src) // discard byte count
  _, ok = x.(T) // check type but discard result

=======================
Printf Escape Sequences
=======================

var x float64 = 123456.7890001
fmt.Printf("%.2f, %T\n", x, x) //123456.79, float64

str := fmt.Sprintf("Sprintf = %.2f\n", x)
fmt.Print(str)  //Sprintf = 123456.79

The DEFAULT format for %v is:

bool:                    %t   //the word true or false
int, int8 etc.:          %d   //base 10
uint, uint8 etc.:        %d   //base 10   (%#x if printed with %#v)
float32, complex64, etc: %g   //float with decimal point (with exponent for large values)
string:                  %s   //the uninterpreted bytes of the string or slice
chan:                    %p   //pointer - base 16 notation, with leading 0x 
pointer:                 %p   //base 16 notation, with leading 0x

=============
Formats verbs   https://golang.org/pkg/fmt/
=============
%p  address of 0th element in base 16 notation, with leading 0x (p for pointer)
%d  decimal integer
%x, %o, %b integer in hexadecimal, octal, binary
%f, %g, %e floating-point number: 3.141593 3.141592653589793 3.141593e+00
%t  boolean: true or false
%c  rune (Unicode code point)
%s  string (string and slice of bytes)
%q  quoted string "abc" or rune 'c'
%v  any value in a natural format
%+v for structs, the plus flag (%+v) adds field names
%#v a Go-syntax representation of the value
%T  type of any value
%%  literal percent sign (no operand)

